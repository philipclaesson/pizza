(()=>{"use strict";const t={pizzas:6,ingredients:{flour:{amount:1e3,unit:"g",alternativeAmount:16.6,alternativeUnit:"dl"},water:{amount:7,unit:"dl",alternativeAmount:700,alternativeUnit:"g"},yeast:{amount:6,unit:"g",alternativeAmount:2.5,alternativeUnit:"ml"},salt:{amount:5,unit:"tsp",alternativeAmount:30,alternativeUnit:"g"}}},n={flour:!1,water:!1,yeast:!1,salt:!1};function e(t){return Math.round(2*t)/2}function a(t){return 10*Math.round(t/10)}function i(t,e){return n[e]&&t.alternativeAmount&&t.alternativeUnit?`${t.alternativeAmount} ${t.alternativeUnit}`:`${t.amount} ${t.unit}`}function o(){const n=document.getElementById("pizza-slider"),o=parseInt(n.value),u=document.getElementById("title");if(u){const t=1===o?"PIZZA":"PIZZE";u.textContent=`${o} ${t}`}const r=function(n){const i=n/t.pizzas,o={};for(const[n,r]of Object.entries(t.ingredients)){const t=r.amount*i;if("tsp"===r.unit){const a=(u=t)>=3?{amount:e(u/3),unit:"tbsp"}:{amount:e(u),unit:"tsp"};o[n]={amount:a.amount,unit:a.unit}}else o[n]=t>100?{amount:a(t),unit:r.unit}:t>10?{amount:Math.round(t),unit:r.unit}:{amount:e(t),unit:r.unit};if("alternativeAmount"in r&&"alternativeUnit"in r&&void 0!==r.alternativeAmount&&void 0!==r.alternativeUnit){const t=r.alternativeAmount*i;"g"===r.alternativeUnit?o[n].alternativeAmount=a(t):o[n].alternativeAmount=e(t),o[n].alternativeUnit=r.alternativeUnit}}var u;return{pizzas:n,ingredients:o}}(o),l=document.getElementById("flour-amount"),s=document.getElementById("water-amount"),d=document.getElementById("yeast-amount"),m=document.getElementById("salt-amount");l&&(l.textContent=i(r.ingredients.flour,"flour")),s&&(s.textContent=i(r.ingredients.water,"water")),d&&(d.textContent=i(r.ingredients.yeast,"yeast")),m&&(m.textContent=i(r.ingredients.salt,"salt"))}document.addEventListener("DOMContentLoaded",(()=>{const t=document.getElementById("pizza-slider");t&&(t.value="6",t.addEventListener("input",o),o(),document.querySelectorAll(".ingredient-item").forEach(((t,e)=>{const a=["flour","water","yeast","salt"][e];t.addEventListener("click",(()=>{!function(t){n[t]=!n[t],o()}(a)})),t.addEventListener("mouseenter",(()=>{t.classList.add("ingredient-hover")})),t.addEventListener("mouseleave",(()=>{t.classList.remove("ingredient-hover")}))})))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,